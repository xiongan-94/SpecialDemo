org.apache.spark.deploy.worker.Worker
extends ThreadSafeRpcEndpoint

life-cycle:constructor -> onStart -> receive* -> onStop

//1.程序入口   820
main()

//2.启动通信环境以及设置节点   826
startRpcEnvAndEndpoint(args.host, args.port, args.webUiPort, args.cores,
      args.memory, args.masters, args.workDir, conf = conf,
      resourceFileOpt = conf.get(SPARK_WORKER_RESOURCE_FILE))
	  
//3.启动通信环境   858
val rpcEnv = RpcEnv.create(systemName, host, port, conf, securityMgr)

//4.设置节点(注意:masterAddresses)   860
rpcEnv.setupEndpoint(ENDPOINT_NAME, new Worker(rpcEnv, webUiPort, cores, memory,masterAddresses, ENDPOINT_NAME, workDir, conf, securityMgr, resourceFileOpt))

//5.启动Worker   199
onStart() 

//6.向Master注册   212
registerWithMaster()

//7.尝试向所有Master(高可用)注册   385
tryRegisterAllMasters()

//8.向单一的Master发送消息   278
sendRegisterMessageToMaster(masterEndpoint){
	409
	masterEndpoint.send(RegisterWorker())
}

//9.注册成功   254
case RegisteredWorker(masterRef, masterWebUiUrl, masterAddress, duplicate) =>{
	logInfo(s"Successfully registered with master $preferredMasterAddress")
}

//10.以固定的频率给自身发送"该给Master发送心跳信息"消息  440
scheduleAtFixedRate({ self.send(SendHeartbeat) })

//11.给Master发送心跳信息  472
if (connected) { sendToMaster(Heartbeat(workerId, self)) }
//12.  712
case Some(masterRef) => masterRef.send(message)

