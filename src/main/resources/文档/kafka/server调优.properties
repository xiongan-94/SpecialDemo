# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.kafka集群唯一ID
broker.id=0
#删除topic功能使能,当前版本此配置默认为true，已从配置文件移除
delete.topic.enable=true


############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

#处理网络请求的线程数量
num.network.threads=3

#用来处理磁盘IO的线程数量
num.io.threads=8

#发送套接字的缓冲区大小
socket.send.buffer.bytes=102400

#接收套接字的缓冲区大小
socket.receive.buffer.bytes=102400

#请求套接字的缓冲区大小
socket.request.max.bytes=104857600


############################# Log Basics #############################

#kafka运行日志存放的路径
log.dirs=/opt/module/kafka/data

#topic在当前broker上的分区个数
num.partitions=1

# 用来恢复和清理data下数据的线程数量
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings  #############################
#组元数据内部主题“__consumer_offsets”和“__transaction_state”的复制因子
#对于开发测试以外的任何东西，建议值大于1，以确保可用性，如3。
offsets.topic.replication.factor=3
transaction.state.log.replication.factor=3
transaction.state.log.min.isr=3

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# 日志保存时间 调优保留三天或更短,减少kafka需求的磁盘空间
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# 单个日志文件的大小,超过滚动
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper连接字符串(详情见Zookeeper文档)。
#这是一个逗号分隔的主机:端口对，每个对应一个zk
#服务器。如。“127.0.0.1:3000 127.0.0.1:3001 127.0.0.1:3002”。
#你也可以附加一个可选的chroot字符串到url来指定
#所有kafka znodes的根目录。
zookeeper.connect=hadoop102:2181,hadoop103:2181,hadoop104:2181/kafka

#连接zk的超时时间
zookeeper.connection.timeout.ms=6000


############################# Group Coordinator Settings #############################

#下面的配置指定了GroupCoordinator延迟初始消费者平衡的时间，单位是毫秒。
#当group.initial.rebalance.delay.ms的值增加到最大值时，再平衡将会被进一步延迟。
#默认值为3秒。
#我们在这里把它重写为0，因为它为开发和测试提供了更好的开箱即用的体验。
#然而，在生产环境中，默认值为3秒更合适，因为这将有助于避免在应用程序启动期间进行不必要的、潜在的昂贵的重新平衡。
group.initial.rebalance.delay.ms=3


############################# Replica Settings ####################
#Replica相关配置默认副本1个
default.replication.factor:1 

#网络通信延时
#当集群之间网络不稳定时,调大该参数
replica.socket.timeout.ms:30000 
# 如果网络不好,或者kafka集群压力较大,会出现副本丢失,然后会频繁复制副本,导致集群压力更大,此时可以调大该参数
replica.lag.time.max.ms= 600000

#kafka传输单条消息大小的上限
#broker可复制的消息的最大字节数, 默认为1M
replica.fetch.max.bytes: 1048576
#kafka 会接收单个消息size的最大限制， 默认为1M左右
message.max.bytes: 1000012
#message.max.bytes必须小于等于replica.fetch.max.bytes，否则就会导致replica之间数据同步失败。


############################# 过期数据清理 ####################
#启用删除策略(二选一)
log.cleanup.policy=delete
#启用压缩策略
log.cleanup.policy=compact



